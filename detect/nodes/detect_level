#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy, math, os, cv2, tf
import numpy as np
from enum import Enum
from std_msgs.msg import UInt8, Float64
from sensor_msgs.msg import CompressedImage
from geometry_msgs.msg import Twist
from cv_bridge import CvBridge
from nav_msgs.msg import Odometry
from dynamic_reconfigure.server import Server
from detect.cfg import DetectLevelParamsConfig
from turtlebot3_autorace_msgs.msg import MovingParam

def fnCalcDistanceDot2Line(a, b, c, x0, y0):
    distance = abs(x0*a + y0*b + c)/math.sqrt(a*a + b*b)
    return distance

def fnCalcDistanceDot2Dot(x1, y1, x2, y2):
    distance = math.sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1))
    return distance

def fnArrangeIndexOfPoint(arr):
    new_arr = arr[:]
    arr_idx = [0] * len(arr)
    for i in range(len(arr)):
        arr_idx[i] = i

    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] < arr[j]:
                buffer = arr_idx[j]
                arr_idx[j] = arr_idx[i]
                arr_idx[i] = buffer
                buffer = new_arr[j]
                new_arr[j] = new_arr[i]
                new_arr[i] = buffer
    return arr_idx

def fnCheckLinearity(point1, point2, point3):
    threshold_linearity = 50
    x1, y1 = point1
    x2, y2 = point3
    if x2-x1 != 0:
        a = (y2-y1)/(x2-x1)
    else:
        a = 1000
    b = -1
    c = y1 - a*x1
    err = fnCalcDistanceDot2Line(a, b, c, point2[0], point2[1])

    if err < threshold_linearity:
        return True
    else:
        return False

def fnCheckDistanceIsEqual(point1, point2, point3):

    threshold_distance_equality = 3
    distance1 = fnCalcDistanceDot2Dot(point1[0], point1[1], point2[0], point2[1])
    distance2 = fnCalcDistanceDot2Dot(point2[0], point2[1], point3[0], point3[1])
    std = np.std([distance1, distance2])

    if std < threshold_distance_equality:
        return True
    else:
        return False

class DetectSign():
    def __init__(self):
        self.fnPreproc()
        # params
        self.hue_red_l = rospy.get_param("~hue_red_l", 0)
        self.hue_red_h = rospy.get_param("~hue_red_h", 10)
        self.saturation_red_l = rospy.get_param("~saturation_red_l", 30)
        self.saturation_red_h = rospy.get_param("~saturation_red_h", 255)
        self.lightness_red_l = rospy.get_param("~lightness_red_l", 48)
        self.lightness_red_h = rospy.get_param("~lightness_red_h", 255)

        self.calibration_mode = rospy.get_param("~calibration_mode", False)

        if self.calibration_mode == True:
            srv_image = Server(DetectLevelParamsConfig, self.cbGetDetectLevelParam)
        
        # subscribes compressed image
        # self.sub_img = rospy.Subscriber('/image_input', CompressedImage, self.cbFindTrafficSign, queue_size = 1)
        self.sub_level_img = rospy.Subscriber('/image_input', CompressedImage, self.cbGetImage, queue_size=1)

        # publishes 
        self.pub_mission = rospy.Publisher('/mission', UInt8, queue_size=1)
        self.pub_mission_level = rospy.Publisher('/mission/level', UInt8, queue_size=1)
        self.pub_max_vel = rospy.Publisher('/control/max_vel', Float64, queue_size = 1)
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)

        # publishes traffic sign image in compressed type 
        self.pub_image_traffic_sign = rospy.Publisher('/detect/sign/compressed', CompressedImage, queue_size = 1)
        self.pub_image_level = rospy.Publisher('/detect/image_level/compressed', CompressedImage, queue_size = 1)
        self.pub_image_color_filtered = rospy.Publisher('/detect/image_level_color_filtered/compressed', CompressedImage, queue_size = 1)

        self.Mission = Enum('Mission', 'Idle TrafficLight Intersection Construction Parking LevelCrossing Tunnel')
        self.LevelCrossingStep = Enum('LevelCrossingStep', 'default process')
        
        self.cvBridge = CvBridge()
        self.cv_image = None
        self.counter = 1
        self.stop_bar_count = 0
        self.is_level_detected = False
        self.is_level_close = False
        self.is_level_opened = False

        self.is_saw_stop = False

        rospy.sleep(1)

        loop_rate = rospy.Rate(15)

        while not rospy.is_shutdown():
            self.fnFindLevel()

            loop_rate.sleep()

    def cbGetDetectLevelParam(self, config, level):

        self.hue_red_l = config.hue_red_l
        self.hue_red_h = config.hue_red_h
        self.saturation_red_l = config.saturation_red_l
        self.saturation_red_h = config.saturation_red_h
        self.lightness_red_l = config.lightness_red_l
        self.lightness_red_h = config.lightness_red_h
        return config

    def cbGetImage(self, image_msg):
        #converting compressed image to opencv image
        np_arr = np.frombuffer(image_msg.data, np.uint8)
        self.cv_image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

        # converting raw image to opencv image
        # self.cv_image = CvBridge.imgmsg_to_cv2(image_msg, "bgr8")

    def cbMovingComplete(self, data):
        self.is_moving_complete = True


    def fnPreproc(self):
        # Initiate SIFT detector
        self.sift = cv2.SIFT_create()

        dir_path = os.path.dirname(os.path.realpath(__file__))
        dir_path = dir_path.replace('detect/nodes', 'detect/')
        dir_path += 'image/'

        self.img_stop = cv2.imread(dir_path + 'stop.png', 0)
        self.kp_stop, self.des_stop = self.sift.detectAndCompute(self.img_stop, None)

        FLANN_INDEX_KDTREE = 0
        index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)
        search_params = dict(checks = 50)

        self.flann = cv2.FlannBasedMatcher(index_params, search_params)

    def fnCalcMSE(self, arr1, arr2):
        squared_diff = (arr1 - arr2) ** 2
        sum = np.sum(squared_diff)
        num_all = arr1.shape[0] * arr1.shape[1] #cv_image_input and 2 should have same shape
        err = sum / num_all
        return err

    def cbFindTrafficSign(self, image_msg):
        # drop the frame to 1/5 (6fps) because of the processing speed. This is up to your computer's operating power.
        # if self.counter % 3 != 0:
        #     self.counter += 1
        #     return
        # else:
        #     self.counter = 1

        #converting compressed image to opencv image
        np_arr = np.frombuffer(image_msg.data, np.uint8)
        cv_image_input = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

        # converting raw image to opencv image
        # cv_image_input = CvBridge.imgmsg_to_cv2(image_msg, "bgr8")

        MIN_MATCH_COUNT = 5 #9
        MIN_MSE_DECISION = 50000

        # find the keypoints and descriptors with SIFT
        kp1, des1 = self.sift.detectAndCompute(cv_image_input,None)
        image_out_num = 1

        # level_crossing
        if self.is_saw_stop == False:
            matches = self.flann.knnMatch(des1,self.des_stop,k=2)
            good = []
            for m,n in matches:
                if m.distance < 0.7*n.distance:
                    good.append(m)
            if len(good)>MIN_MATCH_COUNT:
                src_pts = np.float32([kp1[m.queryIdx].pt for m in good ]).reshape(-1,1,2)
                dst_pts = np.float32([self.kp_stop[m.trainIdx].pt for m in good]).reshape(-1,1,2)

                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                matches = mask.ravel().tolist()

                mse = self.fnCalcMSE(src_pts, dst_pts)
                if mse < MIN_MSE_DECISION:
                    rospy.loginfo("detect stop")
                    image_out_num = 2
                    self.is_saw_stop = True
                    self.counter = 2

        if image_out_num == 1:
            # publishes traffic sign image in compressed type
            self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(cv_image_input, "jpg"))
            
        elif image_out_num == 2:
            draw_params = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matches, # draw only inliers
                            flags = 2)

            final_stop = cv2.drawMatches(cv_image_input,kp1,self.img_stop,self.kp_stop,good,None,**draw_params)

            # publishes traffic sign image in compressed type
            self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final_stop, "jpg"))

        # level process    
        if self.is_saw_stop == True:

            rospy.loginfo("[LevelCrossing] Slow")
            
            msg_pub_max_vel = Float64()
            msg_pub_max_vel.data = 0.05
            self.pub_max_vel.publish(msg_pub_max_vel)    

            while True:
                _, is_level_close, _ = self.fnFindLevel()
                if is_level_close == True:
                    break
                else:
                    pass

            rospy.loginfo("[LevelCrossing] STOP")

            msg_pub_max_vel.data = 0.0
            self.pub_max_vel.publish(msg_pub_max_vel)
            rospy.sleep(1)

            while True:
                _, _, is_level_opened = self.fnFindLevel()
                if is_level_opened == True:
                    break
                else:
                    pass
            
            rospy.loginfo("[LevelCrossing] GO")
            msg_pub_max_vel.data = 0.2
            self.pub_max_vel.publish(msg_pub_max_vel)

            rospy.loginfo("[LevelCrossing] FINISH")

            # go to next mission
            self.pub_mission.publish(self.Mission.Tunnel.value)
            self.counter = 1
        
    def fnFindLevel(self):
        cv_image_mask = self.fnMaskRedOfLevel()

        cv_image_mask = cv2.GaussianBlur(cv_image_mask,(5,5),0)

        return self.fnFindRectOfLevel(cv_image_mask)

    def fnMaskRedOfLevel(self):
        
        image = np.copy(self.cv_image)

        # Convert BGR to HSV
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

        Hue_l = self.hue_red_l
        Hue_h = self.hue_red_h
        Saturation_l = self.saturation_red_l
        Saturation_h = self.saturation_red_h
        Lightness_l = self.lightness_red_l
        Lightness_h = self.lightness_red_h

        # define range of red color in HSV
        lower_red = np.array([Hue_l, Saturation_l, Lightness_l])
        upper_red = np.array([Hue_h, Saturation_h, Lightness_h])

        # Threshold the HSV image to get only red colors
        mask = cv2.inRange(hsv, lower_red, upper_red)
        #res = cv2.bitwise_and(image, image, mask = mask)


        # publishes yellow lane filtered image in compressed type
        self.pub_image_color_filtered.publish(self.cvBridge.cv2_to_compressed_imgmsg(mask, "jpg"))

        mask = cv2.bitwise_not(mask)

        return mask

    def fnFindRectOfLevel(self, mask):
        is_level_detected = False
        is_level_close = False
        is_level_opened = False

        params=cv2.SimpleBlobDetector_Params()
        # Change thresholds
        params.minThreshold = 0
        params.maxThreshold = 255

        # Filter by Area.
        params.filterByArea = True
        params.minArea = 200
        params.maxArea = 3000

        # Filter by Circularity
        params.filterByCircularity = True
        params.minCircularity = 0.3

        # Filter by Convexity
        params.filterByConvexity = True
        params.minConvexity = 0.9

        det=cv2.SimpleBlobDetector_create(params)
        keypts=det.detect(mask)
        frame=cv2.drawKeypoints(self.cv_image,keypts,np.array([]),(0,255,255),cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

        mean_x = 0.0
        mean_y = 0.0

        # if detected 3 red rectangular
        if len(keypts) >= 3:

            msg_pub_max_vel = Float64()
            msg_pub_max_vel.data = 0.04
            self.pub_max_vel.publish(msg_pub_max_vel)

            for i in range(3):
                mean_x = mean_x + keypts[i].pt[0]/3
                mean_y = mean_y + keypts[i].pt[1]/3
            arr_distances = [0]*3
            for i in range(3):
                arr_distances[i] = fnCalcDistanceDot2Dot(mean_x, mean_y, keypts[i].pt[0], keypts[i].pt[1])

            # finding thr farthest point from the center
            idx1, idx2, idx3 = fnArrangeIndexOfPoint(arr_distances)
            frame = cv2.line(frame, (int(keypts[idx1].pt[0]), int(keypts[idx1].pt[1])), (int(keypts[idx2].pt[0]), int(keypts[idx2].pt[1])), (255, 0, 0), 5)
            frame = cv2.line(frame, (int(mean_x), int(mean_y)), (int(mean_x), int(mean_y)), (255, 255, 0), 5)
            point1 =  [int(keypts[idx1].pt[0]), int(keypts[idx1].pt[1]-1)]
            point2 = [int(keypts[idx3].pt[0]), int(keypts[idx3].pt[1]-1)]
            point3 = [int(keypts[idx2].pt[0]), int(keypts[idx2].pt[1]-1)]

            # test linearity and distance equality. If satisfy the both, continue to next process
            is_rects_linear = fnCheckLinearity(point1, point2, point3)
            is_rects_dist_equal = fnCheckDistanceIsEqual(point1, point2, point3)

            if (is_rects_linear == True or is_rects_dist_equal == True) and self.is_level_opened == False:
                # finding the angle of line
                distance_bar2car = 50 / fnCalcDistanceDot2Dot(point1[0], point1[1], point2[0], point2[1])
                
                # publishing topic
                # self.stop_bar_count = 50
                if distance_bar2car > 1.0:
                    rospy.loginfo("detect")
                    self.is_level_detected = True
                    self.state = "detected"
                    msg_pub_max_vel = Float64()
                    msg_pub_max_vel.data = 0.01
                    self.pub_max_vel.publish(msg_pub_max_vel)    

                else:
                    rospy.loginfo("stop")
                    self.is_level_close = True
                    msg_pub_max_vel = Float64()
                    msg_pub_max_vel.data = 0.00
                    self.pub_max_vel.publish(msg_pub_max_vel)

        elif len(keypts) < 1 and (self.is_level_detected == True or self.is_level_close == True):
            self.stop_bar_count = 0
            self.is_level_opened = True
            rospy.loginfo("go")
            msg_pub_max_vel = Float64()
            msg_pub_max_vel.data = 0.2
            self.pub_max_vel.publish(msg_pub_max_vel)
            self.pub_mission.publish(self.Mission.Tunnel.value)

        #if self.stop_bar_count > 0:
        #    self.stop_bar_count -= 1
        #if self.stop_bar_count <= 0:
        #    is_level_opened = True
        #    self.stop_bar_state = 'go'

        # publishes level image in compressed type
        self.pub_image_level.publish(self.cvBridge.cv2_to_compressed_imgmsg(frame, "jpg"))

        return is_level_detected, is_level_close, is_level_opened        


    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_level')
    node = DetectSign()
    node.main()



















