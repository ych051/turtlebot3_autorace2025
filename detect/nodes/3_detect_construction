#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy, os, cv2
import numpy as np
from enum import Enum
from std_msgs.msg import UInt8, Float64, Bool
from sensor_msgs.msg import CompressedImage, LaserScan
from cv_bridge import CvBridge
from nav_msgs.msg import Odometry

class DetectSign():
    def __init__(self):
        self.fnPreproc()

        # subscribes compressed image
        self.sub_img = rospy.Subscriber('/image_input', CompressedImage, self.cbFindTrafficSign, queue_size = 1)
        self.sub_scan_obstacle = rospy.Subscriber('/scan', LaserScan, self.cbScanObstacle, queue_size=1)

        # publishes next mission
        self.pub_mission = rospy.Publisher('/mission', UInt8, queue_size=1)
        self.pub_mission_step = rospy.Publisher('/mission/construction', UInt8, queue_size=1)
        self.pub_max_vel = rospy.Publisher('/control/max_vel', Float64, queue_size = 1)

        self.pub_fake_lane = rospy.Publisher('/control/lane', Float64, queue_size=1)
        self.pub_lane_toggle = rospy.Publisher('/detect/lane_toggle', Bool, queue_size=1)
        self.pub_yellow_toggle = rospy.Publisher('/detect/yellow_toggle', Bool, queue_size=1)
        self.pub_white_toggle = rospy.Publisher('/detect/white_toggle', Bool, queue_size=1)

        # publishes traffic sign image in compressed type 
        self.pub_image_traffic_sign = rospy.Publisher('/detect/sign/compressed', CompressedImage, queue_size = 1)

        self.Mission = Enum('Mission', 'Idle TrafficLight Intersection Construction Parking LevelCrossing Tunnel')
        self.ConstructionStep = Enum('ConstructionStep', 'default process')
        self.current_step = self.ConstructionStep.default.value
        
        self.cvBridge = CvBridge()
        self.counter = 1

        self.is_saw_construction = True
        self.is_obstacle_detected = True
        self.is_moving_complete = False

    def cbMovingComplete(self, data):
        self.is_moving_complete = True

    def cbScanObstacle(self, scan):
        #    왼쪽 175~180
        #    앞   115~120
        #    오른쪽 55~60

        threshold_distance = 0.35
        is_obstacle_detected = False
        start_scan=115
        end_scan=120

        for i in range(start_scan,end_scan):
            if scan.ranges[i] < threshold_distance and scan.ranges[i] > 0.2:
                rospy.loginfo("detect")
                rospy.loginfo(scan.ranges[i])
                is_obstacle_detected = True
        self.is_obstacle_detected = is_obstacle_detected

    def fnPreproc(self):
        # Initiate SIFT detector
        self.sift = cv2.SIFT_create()

        dir_path = os.path.dirname(os.path.realpath(__file__))
        dir_path = dir_path.replace('detect/nodes', 'detect/')
        dir_path += 'image/'

        self.img_construction = cv2.imread(dir_path + 'construction.png', 0)
        self.kp_construction, self.des_constuction = self.sift.detectAndCompute(self.img_construction, None)

        FLANN_INDEX_KDTREE = 0
        index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)
        search_params = dict(checks = 50)

        self.flann = cv2.FlannBasedMatcher(index_params, search_params)

    def fnCalcMSE(self, arr1, arr2):
            squared_diff = (arr1 - arr2) ** 2
            sum = np.sum(squared_diff)
            num_all = arr1.shape[0] * arr1.shape[1] #cv_image_input and 2 should have same shape
            err = sum / num_all
            return err

    def cbFindTrafficSign(self, image_msg):
        np_arr = np.frombuffer(image_msg.data, np.uint8)
        cv_image_input = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

        MIN_MATCH_COUNT = 9 #9
        MIN_MSE_DECISION = 50000

        # find the keypoints and descriptors with SIFT
        kp1, des1 = self.sift.detectAndCompute(cv_image_input,None)
        image_out_num = 1

        # construction
        if self.is_saw_construction == False:
            matches = self.flann.knnMatch(des1,self.des_constuction,k=2)
            good = []
            for m,n in matches:
                if m.distance < 0.7*n.distance:
                    good.append(m)
            if len(good)>MIN_MATCH_COUNT:
                src_pts = np.float32([kp1[m.queryIdx].pt for m in good ]).reshape(-1,1,2)
                dst_pts = np.float32([self.kp_construction[m.trainIdx].pt for m in good]).reshape(-1,1,2)

                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                matches = mask.ravel().tolist()

                mse = self.fnCalcMSE(src_pts, dst_pts)
                if mse < MIN_MSE_DECISION:
                    rospy.loginfo("detect constrcution")
                    image_out_num = 2
                    self.is_saw_construction = True
                    self.pub_yellow_toggle.publish(False)

        if image_out_num == 1:
            # publishes traffic sign image in compressed type
            self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(cv_image_input, "jpg"))
            
        elif image_out_num == 2:
            draw_params = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matches, # draw only inliers
                            flags = 2)

            fianl = cv2.drawMatches(cv_image_input,kp1,self.img_construction,self.kp_construction,good,None,**draw_params)

            # publishes traffic sign image in compressed type
            self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(fianl, "jpg"))

        #construction process
        if self.is_obstacle_detected == True:
            rospy.loginfo('construction processing')
            
            self.pub_lane_toggle.publish(False)
            
            for x in range(0, 15):
                self.pub_fake_lane.publish(350)
                rospy.sleep(0.1)
            for x in range(0, 15):
                self.pub_fake_lane.publish(650)
                rospy.sleep(0.1)
            for x in range(0, 6):
                self.pub_fake_lane.publish(500)
                rospy.sleep(0.1)
            for x in range(0, 15):
                self.pub_fake_lane.publish(650)
                rospy.sleep(0.1)
            for x in range(0, 15):
                self.pub_fake_lane.publish(350)
                rospy.sleep(0.1)

            self.pub_yellow_toggle.publish(True)
            self.pub_lane_toggle.publish(True)
            rospy.loginfo('DONE')
            rospy.sleep(3)
            self.pub_white_toggle.publish(False)
            # go to next mission
            self.pub_mission.publish(self.Mission.Parking.value)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('3_detect_construction')
    node = DetectSign()
    node.main()
