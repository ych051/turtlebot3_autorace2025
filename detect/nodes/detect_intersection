#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim

import rospy
import math
import numpy as np
import os
import cv2
from enum import Enum
from std_msgs.msg import UInt8, Float64
from sensor_msgs.msg import Image, CompressedImage
from cv_bridge import CvBridge, CvBridgeError
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
from turtlebot3_autorace_msgs.msg import MovingParam

class DetectSign():
    def __init__(self):
        self.fnPreproc()

        # subscribes compressed image
        # self.sub_image_original = rospy.Subscriber('/usb_cam/image_raw/compressed', CompressedImage, self.cbFindTrafficSign, queue_size = 1)
        self.sub_image_original = rospy.Subscriber('/camera/image/compressed', CompressedImage, self.cbFindTrafficSign, queue_size = 1)
        self.sub_odom = rospy.Subscriber('/odom', Odometry, self.cbOdom, queue_size=1)
        self.sub_moving_completed = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)


        # publishes next mission
        self.pub_mission = rospy.Publisher('/mission', UInt8, queue_size=1)
        self.pub_mission_step = rospy.Publisher('/mission/intertsection', UInt8, queue_size=1)
        self.pub_fake_lane = rospy.Publisher('/control/lane', Float64, queue_size=1)
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)

        # publishes traffic sign image in compressed type 
        self.pub_image_traffic_sign = rospy.Publisher('/detect/sign/compressed', CompressedImage, queue_size = 1)


        self.Mission = Enum('Mission', 'Idle TrafficLight Intersection Construction Parking LevelCrossing Tunnel')
        self.IntersectionStep = Enum('IntersectionStep', 'default start turn lane end')
        self.current_step = self.IntersectionStep.default.value
        
        self.cvBridge = CvBridge()
        self.counter = 1

        self.current_orientation_w = 0.0
        self.is_saw_intersection = False
        self.is_saw_left_count = 0
        self.is_saw_left = False
        self.is_saw_right_count = 0
        self.is_saw_right = False
        self.is_moving_complete = False

    def cbOdom(self, odom_msg):
        self.current_orientation_w = odom_msg.pose.pose.orientation.w

    def cbMovingComplete(self, data):
        self.is_moving_complete = True

    def fnPreproc(self):
        # Initiate SIFT detector
        self.sift = cv2.xfeatures2d.SIFT_create()

        dir_path = os.path.dirname(os.path.realpath(__file__))
        dir_path = dir_path.replace('detect/nodes', 'detect/')
        dir_path += 'image/'

        # intersection
        self.img_intersection = cv2.imread(dir_path + 'intersection.png',0)
        self.img_left  = cv2.imread(dir_path + 'left.png',0)
        self.img_right = cv2.imread(dir_path + 'right.png',0)
        self.kp_intersection, self.des_intersection  = self.sift.detectAndCompute(self.img_intersection, None)
        self.kp_left, self.des_left  = self.sift.detectAndCompute(self.img_left, None)
        self.kp_right, self.des_right = self.sift.detectAndCompute(self.img_right, None)

        FLANN_INDEX_KDTREE = 0
        index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)
        search_params = dict(checks = 50)

        self.flann = cv2.FlannBasedMatcher(index_params, search_params)

    def fnCalcMSE(self, arr1, arr2):
            squared_diff = (arr1 - arr2) ** 2
            sum = np.sum(squared_diff)
            num_all = arr1.shape[0] * arr1.shape[1] #cv_image_input and 2 should have same shape
            err = sum / num_all
            return err

    def cbFindTrafficSign(self, image_msg):
        # drop the frame to 1/5 (6fps) because of the processing speed. This is up to your computer's operating power.
        # if self.counter % 3 != 0:
        #     self.counter += 1
        #     return
        # else:
        #     self.counter = 1

        #converting compressed image to opencv image
        np_arr = np.frombuffer(image_msg.data, np.uint8)
        cv_image_input = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)


        MIN_MATCH_COUNT = 9 #9
        MIN_MSE_DECISION = 50000

        # find the keypoints and descriptors with SIFT
        kp1, des1 = self.sift.detectAndCompute(cv_image_input,None)
        image_out_num = 1
        
        if self.is_saw_intersection == False:
            matches_intersection = self.flann.knnMatch(des1,self.des_intersection,k=2)
            good_intersection = []
            for m,n in matches_intersection:
                if m.distance < 0.7*n.distance:
                    good_intersection.append(m)
            if len(good_intersection)>MIN_MATCH_COUNT:
                src_pts = np.float32([kp1[m.queryIdx].pt for m in good_intersection ]).reshape(-1,1,2)
                dst_pts = np.float32([self.kp_intersection[m.trainIdx].pt for m in good_intersection]).reshape(-1,1,2)

                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                matches_intersection = mask.ravel().tolist()

                mse = self.fnCalcMSE(src_pts, dst_pts)
                if mse < MIN_MSE_DECISION:
                    rospy.loginfo("detect intersection sign")
                    image_out_num = 2
                    self.is_saw_intersection = True

        if self.is_saw_right == False and self.is_saw_left == False:
            matches_left = self.flann.knnMatch(des1,self.des_left,k=2)
            good_left = []
            for m,n in matches_left:
                if m.distance < 0.7*n.distance:
                    good_left.append(m)
            if len(good_left)>MIN_MATCH_COUNT:
                src_pts = np.float32([kp1[m.queryIdx].pt for m in good_left ]).reshape(-1,1,2)
                dst_pts = np.float32([self.kp_left[m.trainIdx].pt for m in good_left]).reshape(-1,1,2)

                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                matches_left = mask.ravel().tolist()

                mse = self.fnCalcMSE(src_pts, dst_pts)
                if mse < MIN_MSE_DECISION:
                    rospy.loginfo("detect left sign")
                    image_out_num = 3
                    self.is_saw_left_count += 1
                    if self.is_saw_left_count >= 5:
                        self.is_saw_left = True

        if self.is_saw_right == False and self.is_saw_left == False:
            matches_right = self.flann.knnMatch(des1,self.des_right,k=2)
            good_right = []
            for m,n in matches_right:
                if m.distance < 0.7*n.distance:
                    good_right.append(m)
            if len(good_right)>MIN_MATCH_COUNT:
                src_pts = np.float32([kp1[m.queryIdx].pt for m in good_right ]).reshape(-1,1,2)
                dst_pts = np.float32([self.kp_right[m.trainIdx].pt for m in good_right]).reshape(-1,1,2)

                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                matches_right = mask.ravel().tolist()

                mse = self.fnCalcMSE(src_pts, dst_pts)
                if mse < MIN_MSE_DECISION:
                    rospy.loginfo("detect right sign")
                    image_out_num = 4
                    self.is_saw_right_count += 1
                    if (self.is_saw_right_count >= 5):
                        self.is_saw_right = True

        if image_out_num == 1:
            # publishes traffic sign image in compressed type
            self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(cv_image_input, "jpg"))

        elif image_out_num == 2:
            draw_params_intersection = dict(matchColor = (255,0,0), # draw matches in green color
                        singlePointColor = None,
                        matchesMask = matches_intersection, # draw only inliers
                        flags = 2)

            final_intersection = cv2.drawMatches(cv_image_input,kp1,self.img_intersection,self.kp_intersection,good_intersection,None,**draw_params_intersection)

            # publishes traffic sign image in compressed type
            self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final_intersection, "jpg"))

        elif image_out_num == 3:
            draw_params_left = dict(matchColor = (255,0,0), # draw matches in green color
                        singlePointColor = None,
                        matchesMask = matches_left, # draw only inliers
                        flags = 2)

            final_left = cv2.drawMatches(cv_image_input,kp1,self.img_left,self.kp_left,good_left,None,**draw_params_left)

            # publishes traffic sign image in compressed type
            self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final_left, "jpg"))

        elif image_out_num == 4:
            draw_params_right = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matches_right, # draw only inliers
                            flags = 2)

            fianl_right = cv2.drawMatches(cv_image_input,kp1,self.img_right,self.kp_right,good_right,None,**draw_params_right)

            # publishes traffic sign image in compressed type
            self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(fianl_right, "jpg"))

        # process
        if self.is_saw_intersection == True and self.current_step == self.IntersectionStep.default.value:
            if self.current_orientation_w <= 0.33 and self.current_orientation_w >= -0.33 :
                self.current_step = self.IntersectionStep.start.value
                self.pub_mission_step.publish(self.current_step)
                rospy.sleep(5)
                
                msg_moving = MovingParam()
                msg_moving.moving_type=2
                msg_moving.moving_value_angular=45
                msg_moving.moving_value_linear=0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break

        if (self.is_saw_left == True or self.is_saw_right == True) and self.current_step == self.IntersectionStep.start.value:
                self.current_step = self.IntersectionStep.turn.value
                self.pub_mission_step.publish(self.current_step)
                rospy.sleep(3)

                if self.is_saw_right == True:

                    # for x in range(460, 1000, 10):
                    #     fake_lane = 500 - 220*math.sin(0.53*math.radians(x))
                    #     self.pub_fake_lane.publish(fake_lane)
                    #     rospy.sleep(0.1)
                    # for x in range(460, 580, 10):
                    #     fake_lane = 500 - 220*math.sin(0.53*math.radians(x))
                    #     self.pub_fake_lane.publish(fake_lane)
                    #     rospy.sleep(0.1)
                    msg_moving = MovingParam()
                    msg_moving.moving_type=4
                    msg_moving.moving_value_angular=0
                    msg_moving.moving_value_linear=0.15
                    self.pub_moving.publish(msg_moving)
                    while True:
                        if self.is_moving_complete == True:
                            break
                    self.is_moving_complete = False

                    rospy.sleep(3)

                    msg_moving.moving_type=3
                    msg_moving.moving_value_angular=90
                    msg_moving.moving_value_linear=0.0
                    self.pub_moving.publish(msg_moving)
                    while True:
                        if self.is_moving_complete == True:
                            break
                    self.is_moving_complete = False

                    rospy.sleep(3)

                    # self.current_step = self.IntersectionStep.lane.value
                    # self.pub_mission_step.publish(self.current_step)
                    self.current_mission = self.Mission.Construction.value
                    self.pub_mission.publish(self.current_mission)
                    
                elif self.is_saw_left == True:

                    # for x in range(120, 680, 10):
                    #     fake_lane = 500 - 220*math.sin(0.53*math.radians(x))
                    #     self.pub_fake_lane.publish(fake_lane)
                    #     rospy.sleep(0.1)
                    # for x in range(120, 260, 10):
                    #     fake_lane = 500 - 220*math.sin(0.53*math.radians(x))
                    #     self.pub_fake_lane.publish(fake_lane)
                    #     rospy.sleep(0.1)
                    msg_moving = MovingParam()
                    msg_moving.moving_type=4
                    msg_moving.moving_value_angular=0
                    msg_moving.moving_value_linear=0.15
                    self.pub_moving.publish(msg_moving)
                    while True:
                        if self.is_moving_complete == True:
                            break
                    self.is_moving_complete = False

                    rospy.sleep(3)

                    msg_moving.moving_type=2
                    msg_moving.moving_value_angular=90
                    msg_moving.moving_value_linear=0.0
                    self.pub_moving.publish(msg_moving)
                    while True:
                        if self.is_moving_complete == True:
                            break
                    self.is_moving_complete = False

                    rospy.sleep(3)

                    # self.current_step = self.IntersectionStep.end.value
                    # self.pub_mission_step.publish(self.current_step)
                    self.current_mission = self.Mission.Construction.value
                    self.pub_mission.publish(self.current_mission)
        
        # if self.current_step == self.IntersectionStep.lane.value:
        #     self.current_step = self.IntersectionStep.end.value
                
        # if self.current_step == self.IntersectionStep.end.value:
        #     self.current_mission = self.Mission.Construction.value
        #     self.pub_mission.publish(self.current_mission)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_intersection')
    node = DetectSign()
    node.main()



















