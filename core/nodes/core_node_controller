#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from turtle import turtlesize
import rospy, roslaunch, os
from enum import Enum
from std_msgs.msg import UInt8
 
class CoreNodeController():
    def __init__(self):
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('core/nodes', '')

        self.Mission = Enum('Mission', 'Idle TrafficLight Intersection Construction Parking LevelCrossing Tunnel')
        self.Launcher = Enum('Launcher', 'detect_lane control_lane control_moving')

        self.TrafficLight_launched=False
        self.Intersection_launched=False
        self.Construction_launched=False
        self.Parking_launched=False
        self.LevelCrossing_launched=False
        self.Tunnel_launched=False
        self.detect_lane_launched=False
        self.control_tunnel_launched = False
        self.control_moving_launched = False
        self.control_lane_launched = False

        self.sub_mission = rospy.Subscriber('/mission', UInt8, self.cbReceiveMode, queue_size=1)

        self.is_triggered = False
        self.current_mode = self.Mission.Idle.value
        
        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        
        loop_rate = rospy.Rate(10) # 10hz

        while not rospy.is_shutdown():
            if self.is_triggered == True:
                self.ControlNode()
            loop_rate.sleep()

    def cbReceiveMode(self, mode_msg):
        rospy.loginfo("starts the progress with %d", mode_msg.data)
        self.current_mode = mode_msg.data
        self.is_triggered = True

    def ControlNode(self):
        if self.current_mode == self.Mission.TrafficLight.value:
            self.Launched_()
            rospy.loginfo("TrafficLight Start")
            self.Launch(self.Mission.TrafficLight.value)

        elif self.current_mode == self.Mission.Intersection.value:
            self.Launched_()
            rospy.loginfo("Intersection Start")
            self.Launch(self.Mission.Intersection.value)

        elif self.current_mode == self.Mission.Construction.value:
            self.Launched_()
            rospy.loginfo("Construction Start")
            self.Launch(self.Mission.Construction.value)

        elif self.current_mode == self.Mission.Parking.value:
            self.Launched_()
            rospy.loginfo("Parking Start")
            self.Launch(self.Mission.Parking.value)

        elif self.current_mode == self.Mission.LevelCrossing.value:
            self.Launched_()
            rospy.loginfo("LevelCrossing Start")
            self.Launch(self.Mission.LevelCrossing.value)

        elif self.current_mode == self.Mission.Tunnel.value:
            self.Launched_()
            rospy.loginfo("Tunnel Start")
            self.Launch(self.Mission.Tunnel.value)

        self.is_triggered = False

    def Launched_(self):
        if self.TrafficLight_launched==True:
            self.TrafficLight.shutdown()
            self.TrafficLight_launched=False

        if self.Intersection_launched==True:
            self.Intersection.shutdown()
            self.Intersection_launched=False
        
        if self.Construction_launched==True:
            self.Construction.shutdown()
            self.Construction_launched=False

        if self.Parking_launched==True:
            self.Parking.shutdown()
            self.Parking_launched=False

        if self.LevelCrossing_launched==True:
            self.LevelCrossing.shutdown()
            self.LevelCrossing_launched=False

        if self.Tunnel_launched==True:
            self.Tunnel.shutdown()
            self.Tunnel_launched=False
    
    def Launch(self, launch_num):

        # example 
        if launch_num == self.Mission.TrafficLight.value:
            
            self.TrafficLight = roslaunch.scriptapi.ROSLaunch()
            self.TrafficLight = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/1_detect_traffic_light.launch"])
            self.TrafficLight_launched = True
            self.TrafficLight.start()
            rospy.sleep(1)
            self.moving_launch()

        elif launch_num == self.Mission.Intersection.value:
            
            self.moving_launch()

            self.Intersection = roslaunch.scriptapi.ROSLaunch()
            self.Intersection = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/2_detect_intersection.launch"])
            self.Intersection_launched = True
            self.Intersection.start()

        elif launch_num == self.Mission.Construction.value:
            self.moving_launch()

            self.Construction = roslaunch.scriptapi.ROSLaunch()
            self.Construction = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/3_detect_construction.launch"])
            self.Construction_launched = True
            self.Construction.start()

        elif launch_num == self.Mission.Parking.value:
            self.moving_launch()

            self.Parking = roslaunch.scriptapi.ROSLaunch()
            self.Parking = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/4_detect_parking.launch"])
            self.Parking_launched = True
            self.Parking.start()

        elif launch_num == self.Mission.LevelCrossing.value:

            self.moving_launch()

            self.LevelCrossing = roslaunch.scriptapi.ROSLaunch()
            self.LevelCrossing = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/5_detect_level.launch"])
            self.LevelCrossing_launched = True
            self.LevelCrossing.start()

        elif launch_num == self.Mission.Tunnel.value:

            self.Tunnel = roslaunch.scriptapi.ROSLaunch()
            self.Tunnel = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/6_detect_tunnel.launch"])
            self.Tunnel_launched = True
            self.Tunnel.start()

            self.moving_launch()

    def moving_launch(self):
        if self.detect_lane_launched==False:
                self.detect_lane = roslaunch.scriptapi.ROSLaunch()
                self.detect_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/0_detect_lane.launch"])
                self.detect_lane_launched = True
                self.detect_lane.start()

        if self.control_lane_launched==False:
            self.control_lane = roslaunch.scriptapi.ROSLaunch()
            self.control_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "control/launch/control_lane.launch"])
            self.control_lane_launched = True
            self.control_lane.start()

        if self.control_moving_launched==False:
            self.control_moving = roslaunch.scriptapi.ROSLaunch()
            self.control_moving = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "control/launch/control_moving.launch"])
            self.control_moving_launched = True
            self.control_moving.start()
            
        if self.control_tunnel_launched==False and self.Tunnel_launched == True:
            self.control_tunnel = roslaunch.scriptapi.ROSLaunch()
            self.control_tunnel = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "control/launch/control_tunnel.launch"])
            self.control_tunnel_launched = True
            self.control_tunnel.start()

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_node_controller')
    node = CoreNodeController()
    node.main()