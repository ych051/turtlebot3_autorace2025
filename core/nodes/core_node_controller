#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Authors: Leon Jung, [AuTURBO] Kihoon Kim (https://github.com/auturbo), Gilbert

import rospy, roslaunch
import numpy as np
import subprocess
import os
import sys
from enum import Enum
from std_msgs.msg import UInt8
 
class CoreNodeController():
    def __init__(self):
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('core/nodes', '')

        # Subscriber
        self.sub_mission = rospy.Subscriber('/mission', UInt8, self.cbReceiveMode, queue_size=1)
        self.sub_mission_step = rospy.Subscriber('/mission/intertsection', UInt8, self.cbReceiveStep, queue_size=1)
        self.sub_mission_step1 = rospy.Subscriber('/mission/construction', UInt8, self.cbReceiveStep1, queue_size=1)

        self.Mission = Enum('Mission', 'Idle TrafficLight Intersection Construction Parking LevelCrossing Tunnel')
        self.IntersectionStep = Enum('IntersectionStep', 'default start turn lane end')
        self.ConstructionStep = Enum('ConstructionStep', 'default start turn lane end')

        self.Launcher = Enum('Launcher', 'launch_detect_lane launch_detect_traffic_light launch_control_lane launch_detect_intersection launch_control_moving launch_detect_construction')

        # 預設空任務
        self.is_triggered = False
        self.current_mode = self.Mission.Idle.value
        self.current_step = self.IntersectionStep.default.value
        self.current_step1 = self.ConstructionStep.default.value

        self.launch_detect_lane_launched = False
        self.launch_detect_traffic_light_launched = False
        self.launch_detect_intersection_launched = False
        self.launch_detect_construction_launched = False

        self.launch_control_lane_launched = False
        self.launch_control_moving_launched = False

        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        
        loop_rate = rospy.Rate(10) # 10hz

        while not rospy.is_shutdown():
            if self.is_triggered == True:
                self.fnControlNode()
            
            loop_rate.sleep()

    def cbReceiveMode(self, mode_msg):
        rospy.loginfo("starts the progress with %d", mode_msg.data)
        
        self.current_mode = mode_msg.data
        self.is_triggered = True

    def cbReceiveStep(self, mode_msg):
        self.current_step = mode_msg.data
        self.is_triggered = True

    def cbReceiveStep1(self, mode_msg):
        self.current_step1 = mode_msg.data
        self.is_triggered = True


    def fnControlNode(self):
        # traffic_light
        if self.current_mode == self.Mission.TrafficLight.value:
            rospy.loginfo("New trigger for traffic_light")
            self.fnLaunch(self.Launcher.launch_detect_traffic_light.value, True)
            self.fnLaunch(self.Launcher.launch_detect_lane.value, True)

        # intersection
        elif self.current_mode == self.Mission.Intersection.value:
            if self.current_step == self.IntersectionStep.default.value:
                rospy.loginfo("New trigger for intersection")
                self.fnLaunch(self.Launcher.launch_detect_intersection.value, True)
                self.fnLaunch(self.Launcher.launch_control_lane.value, True)
                self.fnLaunch(self.Launcher.launch_control_moving.value, True)

                self.fnLaunch(self.Launcher.launch_detect_traffic_light.value, False)
                
            elif self.current_step == self.IntersectionStep.start.value:
                self.fnLaunch(self.Launcher.launch_control_lane.value, False)
                
            elif self.current_step == self.IntersectionStep.turn.value:
                self.fnLaunch(self.Launcher.launch_control_lane.value, True)
            #     self.fnLaunch(self.Launcher.launch_detect_lane.value, True)
            #     self.fnLaunch(self.Launcher.launch_control_lane.value, True)

            # elif self.current_step == self.IntersectionStep.end.value:
            #     self.fnLaunch(self.Launcher.launch_control_moving.value, True)

            #     self.fnLaunch(self.Launcher.launch_detect_lane.value, False)
            #     self.fnLaunch(self.Launcher.launch_control_lane.value, False)

        # construction
        elif self.current_mode == self.Mission.Construction.value:
            if self.current_step1 == self.ConstructionStep.default.value:
                rospy.loginfo("New trigger for construction")
                self.fnLaunch(self.Launcher.launch_detect_lane.value, True)
                self.fnLaunch(self.Launcher.launch_control_lane.value, True)

                self.fnLaunch(self.Launcher.launch_detect_intersection.value, False)
                self.fnLaunch(self.Launcher.launch_detect_construction.value, True)

            elif self.current_step1 == self.ConstructionStep.start.value:
                self.fnLaunch(self.Launcher.launch_control_lane.value, False)
                
        # parking
        elif self.current_mode == self.Mission.Parking.value:
            rospy.loginfo("New trigger for parking")
            self.fnLaunch(self.Launcher.launch_control_lane.value, True)

        # level_crossing
        elif self.current_mode == self.Mission.LevelCrossing.value:
            rospy.loginfo("New trigger for level_crossing")

        # tunnel
        elif self.current_mode == self.Mission.Tunnel.value:
            rospy.loginfo("New trigger for tunnel")

        self.is_triggered = False

    def fnLaunch(self, launch_num, is_start):
        if launch_num == self.Launcher.launch_detect_lane.value:
            if is_start == True:
                if self.launch_detect_lane_launched == False:
                    self.launch_detect_lane = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/detect_lane.launch"])
                    self.launch_detect_lane_launched = True
                    self.launch_detect_lane.start()
                else:
                    pass
            else:
                if self.launch_detect_lane_launched == True:
                    self.launch_detect_lane_launched = False
                    self.launch_detect_lane.shutdown()
                else:
                    pass
        elif launch_num == self.Launcher.launch_detect_traffic_light.value:
            if is_start == True:
                if self.launch_detect_traffic_light_launched == False:
                    self.launch_detect_traffic_light = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_traffic_light = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/detect_traffic_light.launch"])
                    self.launch_detect_traffic_light_launched = True
                    self.launch_detect_traffic_light.start()
                else:
                    pass
            else:
                if self.launch_detect_traffic_light_launched == True:
                    self.launch_detect_traffic_light_launched = False
                    self.launch_detect_traffic_light.shutdown()
                else:
                    pass
        elif launch_num == self.Launcher.launch_control_lane.value:
            if is_start == True:
                if self.launch_control_lane_launched == False:
                    self.launch_control_lane = roslaunch.scriptapi.ROSLaunch()
                    self.launch_control_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "control/launch/control_lane.launch"])
                    self.launch_control_lane_launched = True
                    self.launch_control_lane.start()
                else:
                    pass
            else:
                if self.launch_control_lane_launched == True:
                    self.launch_control_lane_launched = False
                    self.launch_control_lane.shutdown()
                else:
                    pass
        elif launch_num == self.Launcher.launch_detect_intersection.value:
            if is_start == True:
                if self.launch_detect_intersection_launched == False:
                    self.launch_detect_intersection = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_intersection = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/detect_intersection.launch"])
                    self.launch_detect_intersection_launched = True
                    self.launch_detect_intersection.start()
                else:
                    pass
            else:
                if self.launch_detect_intersection_launched == True:
                    self.launch_detect_intersection_launched = False
                    self.launch_detect_intersection.shutdown()
                else:
                    pass
        elif launch_num == self.Launcher.launch_control_moving.value:
            if is_start == True:
                if self.launch_control_moving_launched == False:
                    self.launch_control_moving = roslaunch.scriptapi.ROSLaunch()
                    self.launch_control_moving = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "control/launch/control_moving.launch"])
                    self.launch_control_moving_launched = True
                    self.launch_control_moving.start()
                else:
                    pass
            else:
                if self.launch_control_moving_launched == True:
                    self.launch_control_moving_launched = False
                    self.launch_control_moving.shutdown()
                else:
                    pass
        elif launch_num == self.Launcher.launch_detect_construction.value:
            if is_start == True:
                if self.launch_detect_construction_launched == False:
                    self.launch_detect_construction = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_construction = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/detect_construction.launch"])
                    self.launch_detect_construction_launched = True
                    self.launch_detect_construction.start()
                else:
                    pass
            else:
                if self.launch_detect_construction_launched == True:
                    self.launch_detect_construction_launched = False
                    self.launch_detect_construction.shutdown()
                else:
                    pass


    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_node_controller')
    node = CoreNodeController()
    node.main()
