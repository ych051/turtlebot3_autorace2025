#!/usr/bin/env python
# -*- coding: utf-8 -*-

from turtle import turtlesize
import rospy, roslaunch, os
from enum import Enum
from std_msgs.msg import UInt8
 
class CoreNodeController():
    def __init__(self):
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('core/nodes', '')

        # Subscriber
        self.sub_mission = rospy.Subscriber('/mission', UInt8, self.cbReceiveMode, queue_size=1)

        # Sub from each mission step data
        # example
        rospy.Subscriber('/mission/intersection', UInt8, self.cbIntersectionStep, queue_size=1)

        self.Mission = Enum('Mission', 'Idle TrafficLight Intersection Construction Parking LevelCrossing Tunnel')

        # each mission step enum
        self.IntersectionStep = Enum('IntersectionStep', 'default process')
        self.ConstructionStep = Enum('ConstructionStep', 'default process')
        self.ParkingStep = Enum('ParkingStep', 'default process')
        self.LevelCrossingStep = Enum('LevelCrossingStep', 'default process')
        self.TunnelStep = Enum('TunnelStep', 'default process nav end')

        self.is_triggered = False
        self.current_mode = self.Mission.Idle.value
        self.current_step_intersection = self.IntersectionStep.default.value
        self.current_step_construction = self.ConstructionStep.default.value
        self.current_step_parking = self.ParkingStep.default.value
        self.current_step_level = self.LevelCrossingStep.default.value
        self.current_step_tunnel = self.TunnelStep.default.value


        # launcher enum
        self.Launcher = Enum('Launcher', 'turtlesim')
        self.launch_turtlesim_launched = False


        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        
        loop_rate = rospy.Rate(10) # 10hz

        while not rospy.is_shutdown():
            if self.is_triggered == True:
                self.fnControlNode()
            
            loop_rate.sleep()

    def cbReceiveMode(self, mode_msg):
        rospy.loginfo("starts the progress with %d", mode_msg.data)
        
        self.current_mode = mode_msg.data
        self.is_triggered = True

    # create callback function
    # example
    def cbIntersectionStep(self, mode_msg):
        self.current_step_intersection = mode_msg.data
        self.is_triggered = True

    def fnControlNode(self):

        # example
        if self.current_mode == self.Mission.TrafficLight.value:
            rospy.loginfo("NOW TRAFFIC_LIGHT")
            # if self.current_step_intersection == self.IntersectionStep.process.value:
            #     self.fnLaunch(self.Launcher.turtlesim.value, True)
        elif self.current_mode == self.Mission.Intersection.value:
            rospy.loginfo("NOW INTERSECTION")
            # if self.current_step_intersection == self.IntersectionStep.process.value:
            #     self.fnLaunch(self.Launcher.turtlesim.value, False)
                    
        self.is_triggered = False

    def fnLaunch(self, launch_num, is_start):

        # example 
        if launch_num == self.Launcher.turtlesim.value:
            if is_start == True:
                if self.launch_turtlesim_launched == False:
                    self.launch_turtlesim = roslaunch.scriptapi.ROSLaunch()
                    self.launch_turtlesim = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "core/launch/turtlesim.launch"])
                    self.launch_turtlesim_launched = True
                    self.launch_turtlesim.start()
                else:
                    pass
            else:
                if self.launch_turtlesim_launched == True:
                    self.launch_turtlesim_launched = False
                    self.launch_turtlesim.shutdown()
                else:
                    pass
            
    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_node_controller')
    node = CoreNodeController()
    node.main()
